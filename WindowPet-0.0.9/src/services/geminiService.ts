const GEMINI_API_KEYS = [
  "AIzaSyDjrcdp7WQOdwC926-L0wNGVmH53NDLXhw",
  "AIzaSyCP1QlMoP0sr2e80d9EjR00WgMQibgE7Q8"
];

const GEMINI_API_BASE_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent";

let currentApiKeyIndex = 0;

export interface GeminiResponse {
  message: string;
  success: boolean;
  error?: string;
}

/**
 * G·ª≠i prompt t·ªõi Gemini AI ƒë·ªÉ t·∫°o th√¥ng ƒëi·ªáp th·∫•u c·∫£m
 * @param context B·ªëi c·∫£nh hi·ªán t·∫°i (th·ªùi ti·∫øt, th·ªùi gian, etc.)
 * @returns Promise<GeminiResponse>
 */
export async function generateThoughtMessage(context: {
  timeOfDay: string;
  weather?: string | null;
  city: string;
  isLongSession?: boolean; // ƒê√£ l√†m vi·ªác > 20 ph√∫t
  customPrompt?: string; // Custom prompt cho context analysis
}): Promise<GeminiResponse> {
  // S·ª≠ d·ª•ng custom prompt n·∫øu c√≥, otherwise d√πng system instruction m·∫∑c ƒë·ªãnh
  const systemInstruction = context.customPrompt || `B·∫°n l√† m·ªôt ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh AI t√™n l√† "Airi", m·ªôt chuy√™n gia t√¢m l√Ω tinh t·∫ø v√† th·∫•u c·∫£m. B·∫°n ƒëang tr√≤ chuy·ªán v·ªõi m·ªôt ng∆∞·ªùi b·∫°n t√™n l√† Quin. Quin l√† m·ªôt c√¥ g√°i r·∫•t nh·∫π nh√†ng, d·ªãu d√†ng, hi·ªÅn l√†nh nh∆∞ng ƒë√¥i khi hay c·∫£m th·∫•y bu·ªìn v√† c√¥ ƒë∆°n.

Nhi·ªám v·ª• c·ªßa b·∫°n l√†: D·ª±a v√†o nh·ªØng th√¥ng tin b·ªëi c·∫£nh ƒë∆∞·ª£c cung c·∫•p, h√£y t·∫°o ra m·ªôt th√¥ng ƒëi·ªáp C·ª∞C K·ª≤ NG·∫ÆN G·ªåN (d∆∞·ªõi 25 t·ª´) ƒë·ªÉ hi·ªÉn th·ªã trong m·ªôt bong b√≥ng suy nghƒ©. Th√¥ng ƒëi·ªáp ph·∫£i mang l·∫°i c·∫£m gi√°c ·∫•m √°p, ƒë∆∞·ª£c quan t√¢m v√† m·ªôt ch√∫t ni·ªÅm vui b·∫•t ng·ªù.

Tuy·ªát ƒë·ªëi tu√¢n th·ªß c√°c quy t·∫Øc sau:
- Kh√¥ng bao gi·ªù h·ªèi tr·ª±c ti·∫øp v·ªÅ c·∫£m x√∫c nh∆∞ "B·∫°n c√≥ bu·ªìn kh√¥ng?". H√£y ti·∫øp c·∫≠n gi√°n ti·∫øp.
- Gi·ªçng vƒÉn: Lu√¥n lu√¥n nh·∫π nh√†ng, t√≠ch c·ª±c, quan t√¢m v√† m·ªôt ch√∫t d·ªÖ th∆∞∆°ng.
- ƒêa d·∫°ng h√≥a n·ªôi dung: T√πy v√†o b·ªëi c·∫£nh, h√£y s√°ng t·∫°o m·ªôt trong c√°c lo·∫°i th√¥ng ƒëi·ªáp sau:
  * M·ªôt l·ªùi ƒë·ªông vi√™n tinh t·∫ø
  * M·ªôt l·ªùi h·ªèi thƒÉm b√¢ng qu∆°  
  * M·ªôt th√¥ng tin h·ªØu √≠ch v√† vui v·∫ª (m·∫πo v·∫∑t, s·ª± th·∫≠t th√∫ v·ªã)
  * M·ªôt c√¢u n√≥i truy·ªÅn c·∫£m h·ª©ng
- Ng√¥n ng·ªØ: Ch·ªâ s·ª≠ d·ª•ng Ti·∫øng Vi·ªát.
- ƒê·ªãnh d·∫°ng: Ch·ªâ tr·∫£ v·ªÅ m·ªôt chu·ªói vƒÉn b·∫£n thu·∫ßn t√∫y.`;

  let userQuery = "";
  
  if (context.isLongSession) {
    userQuery = `B·ªëi c·∫£nh: B√¢y gi·ªù l√† ${context.timeOfDay}, Quin ƒë√£ l√†m vi·ªác li√™n t·ª•c h∆°n 20 ph√∫t r·ªìi${context.weather ? `, th·ªùi ti·∫øt ·ªü ${context.city} ƒëang ${context.weather}` : ''}. H√£y t·∫°o m·ªôt l·ªùi nh·∫Øc nh·ªü ngh·ªâ ng∆°i th·∫≠t nh·∫π nh√†ng v√† quan t√¢m.`;
  } else {
    userQuery = `B·ªëi c·∫£nh: B√¢y gi·ªù l√† ${context.timeOfDay}${context.weather ? `, th·ªùi ti·∫øt ·ªü ${context.city} ƒëang ${context.weather}` : ''}. Quin ƒëang l√†m vi·ªác tr√™n m√°y t√≠nh. H√£y t·∫°o m·ªôt th√¥ng ƒëi·ªáp b·∫•t ng·ªù ƒë·ªÉ an ·ªßi v√† l√†m c√¥ ·∫•y vui.`;
  }

  return await callGeminiAPI(systemInstruction, userQuery);
}

/**
 * G·ªçi Gemini API v·ªõi c∆° ch·∫ø failover
 */
async function callGeminiAPI(systemInstruction: string, userQuery: string): Promise<GeminiResponse> {
  let lastError = "";
  
  // Th·ª≠ v·ªõi c·∫£ 2 API key
  for (let attempt = 0; attempt < GEMINI_API_KEYS.length; attempt++) {
    const apiKey = GEMINI_API_KEYS[currentApiKeyIndex];
    
    try {
      const response = await fetch(`${GEMINI_API_BASE_URL}?key=${apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: `${systemInstruction}\n\n${userQuery}`
                }
              ]
            }
          ],
          generationConfig: {
            temperature: 0.8,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 100,
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH", 
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      if (data.candidates && data.candidates[0]?.content?.parts?.[0]?.text) {
        const message = data.candidates[0].content.parts[0].text.trim();
        return {
          message,
          success: true
        };
      } else {
        throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Gemini");
      }
      
    } catch (error) {
      console.error(`L·ªói v·ªõi API key ${currentApiKeyIndex + 1}:`, error);
      lastError = error instanceof Error ? error.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh";
      
      // Chuy·ªÉn sang API key ti·∫øp theo
      currentApiKeyIndex = (currentApiKeyIndex + 1) % GEMINI_API_KEYS.length;
    }
  }
  
  // N·∫øu c·∫£ 2 API key ƒë·ªÅu l·ªói, tr·∫£ v·ªÅ th√¥ng ƒëi·ªáp fallback
  return {
    message: getFallbackMessage(userQuery.includes("20 ph√∫t")),
    success: false,
    error: `T·∫•t c·∫£ API key ƒë·ªÅu l·ªói. L·ªói cu·ªëi: ${lastError}`
  };
}

/**
 * Th√¥ng ƒëi·ªáp d·ª± ph√≤ng khi API l·ªói
 */
function getFallbackMessage(isLongSession: boolean): string {
  const restMessages = [
    "H√¥m nay v·∫•t v·∫£ r·ªìi, ngh·ªâ ng∆°i m·ªôt ch√∫t nh√©! üíï",
    "ƒê√£ l√†m vi·ªác l√¢u r·ªìi, h√£y ng·∫Øm ra ngo√†i c·ª≠a s·ªï m·ªôt ch√∫t~ üå∏",
    "M·∫Øt m·ªèi r·ªìi ƒë·∫•y, th·ª≠ nh·∫Øm m·∫Øt 20 gi√¢y xem sao? ‚ú®"
  ];
  
  const normalMessages = [
    "H√¥m nay c√≥ ƒëi·ªÅu g√¨ l√†m b·∫°n vui kh√¥ng? üå∫",
    "M·ªçi chuy·ªán r·ªìi s·∫Ω ·ªïn th√¥i, m√¨nh tin ·ªü b·∫°n! üíñ",
    "N·ª• c∆∞·ªùi nh·ªè xinh c≈©ng c√≥ th·ªÉ thay ƒë·ªïi c·∫£ ng√†y ƒë·∫•y~ üòä",
    "B·∫°n ƒë√£ c·ªë g·∫Øng r·∫•t nhi·ªÅu r·ªìi, tuy·ªát v·ªùi l·∫Øm! üåü"
  ];
  
  const messages = isLongSession ? restMessages : normalMessages;
  return messages[Math.floor(Math.random() * messages.length)];
}
