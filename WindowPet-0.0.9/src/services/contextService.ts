/**
 * üß† CONTEXT SERVICE - Tr√°i tim Nh·∫≠n th·ª©c c·ªßa Tr·ª£ L√Ω AI
 * 
 * Service n√†y gi√°m s√°t clipboard v√† context ng∆∞·ªùi d√πng ƒë·ªÉ:
 * - Ph√°t hi·ªán n·ªôi dung quan tr·ªçng (errors, code, vƒÉn b·∫£n d√†i)
 * - Ph√¢n t√≠ch ng·ªØ c·∫£nh l√†m vi·ªác
 * - K√≠ch ho·∫°t AI h·ªó tr·ª£ th√¥ng minh
 * 
 * Ph√°t tri·ªÉn b·ªüi: H√†n Nh∆∞ | D·ª± √°n: Tr·ª£ L√Ω Nh·∫≠n Th·ª©c AI
 */

import { invoke } from '@tauri-apps/api/tauri';
import { generateThoughtMessage } from './geminiService';
import { getCurrentTimeInfo } from './weatherService';

// Types
interface ClipboardEvent {
  content: string;
  timestamp: number;
  type: 'text' | 'error' | 'code' | 'url' | 'long_text';
  wordCount: number;
}

interface ContextData {
  activeWindow: string | null;
  clipboard: ClipboardEvent | null;
  timeContext: any;
  suggestions: string[];
}

interface ContextAnalysis {
  isError: boolean;
  isCode: boolean;
  isImportant: boolean;
  contentType: string;
  aiSuggestion: string;
}

// Singleton Context Manager
class ContextManager {
  private static instance: ContextManager;
  private clipboardHistory: ClipboardEvent[] = [];
  private currentContext: ContextData;
  private isMonitoring = false;
  private listeners: Array<(context: ContextData) => void> = [];
  
  // Patterns for content analysis
  private readonly ERROR_PATTERNS = [
    /error/gi, /exception/gi, /failed/gi, /cannot/gi, 
    /undefined/gi, /null pointer/gi, /stack trace/gi,
    /404/gi, /500/gi, /timeout/gi
  ];
  
  private readonly CODE_PATTERNS = [
    /function\s+\w+/gi, /class\s+\w+/gi, /def\s+\w+/gi,
    /import\s+\w+/gi, /from\s+\w+/gi, /console\.log/gi,
    /SELECT\s+\*/gi, /INSERT\s+INTO/gi, /<\w+>/gi
  ];
  
  private readonly LONG_TEXT_THRESHOLD = 100; // words

  private constructor() {
    this.currentContext = {
      activeWindow: null,
      clipboard: null,
      timeContext: getCurrentTimeInfo(),
      suggestions: []
    };
  }

  public static getInstance(): ContextManager {
    if (!ContextManager.instance) {
      ContextManager.instance = new ContextManager();
    }
    return ContextManager.instance;
  }

  /**
   * üöÄ Kh·ªüi ƒë·ªông monitoring context
   */
  public async startMonitoring(): Promise<void> {
    if (this.isMonitoring) return;
    
    this.isMonitoring = true;
    console.log("üß† Context AI ƒë√£ kh·ªüi ƒë·ªông - b·∫Øt ƒë·∫ßu gi√°m s√°t ng·ªØ c·∫£nh...");

    // Monitor clipboard changes
    this.startClipboardMonitoring();
    
    // Monitor active window
    this.startWindowMonitoring();
    
    // Update time context
    setInterval(() => {
      this.currentContext.timeContext = getCurrentTimeInfo();
    }, 30000); // Update every 30s
  }

  /**
   * üìã Gi√°m s√°t clipboard changes
   */
  private async startClipboardMonitoring(): Promise<void> {
    let lastClipboardContent = '';
    
    const checkClipboard = async () => {
      try {
        // S·ª≠ d·ª•ng Tauri clipboard API (c·∫ßn implement command)
        const currentContent = await invoke<string>('get_clipboard_text');
        
        if (currentContent && currentContent !== lastClipboardContent && currentContent.length > 10) {
          lastClipboardContent = currentContent;
          
          const clipboardEvent: ClipboardEvent = {
            content: currentContent,
            timestamp: Date.now(),
            type: this.detectContentType(currentContent),
            wordCount: this.getWordCount(currentContent)
          };
          
          this.clipboardHistory.push(clipboardEvent);
          this.currentContext.clipboard = clipboardEvent;
          
          // Gi·ªØ l·∫°i ch·ªâ 10 entries g·∫ßn nh·∫•t
          if (this.clipboardHistory.length > 10) {
            this.clipboardHistory = this.clipboardHistory.slice(-10);
          }
          
          // Ph√¢n t√≠ch v√† ƒë∆∞a ra suggestions
          await this.analyzeClipboardContent(clipboardEvent);
          
          this.notifyListeners();
          
          console.log(`üìã Clipboard update: ${clipboardEvent.type} (${clipboardEvent.wordCount} words)`);
        }
      } catch (error) {
        console.warn("Kh√¥ng th·ªÉ ƒë·ªçc clipboard:", error);
      }
    };
    
    // Check every 2 seconds
    setInterval(checkClipboard, 2000);
  }

  /**
   * ü™ü Gi√°m s√°t active window
   */
  private async startWindowMonitoring(): Promise<void> {
    const checkActiveWindow = async () => {
      try {
        const windowTitle = await invoke<string>('get_active_window_title');
        
        if (windowTitle && windowTitle !== this.currentContext.activeWindow) {
          this.currentContext.activeWindow = windowTitle;
          
          // Generate context-based suggestions
          await this.generateWindowSuggestions(windowTitle);
          
          this.notifyListeners();
          console.log(`ü™ü Active window: ${windowTitle}`);
        }
      } catch (error) {
        console.warn("Kh√¥ng th·ªÉ l·∫•y active window:", error);
      }
    };
    
    // Check every 5 seconds
    setInterval(checkActiveWindow, 5000);
  }

  /**
   * üîç Ph√°t hi·ªán lo·∫°i n·ªôi dung
   */
  private detectContentType(content: string): ClipboardEvent['type'] {
    if (this.ERROR_PATTERNS.some(pattern => pattern.test(content))) {
      return 'error';
    }
    
    if (this.CODE_PATTERNS.some(pattern => pattern.test(content))) {
      return 'code';
    }
    
    if (content.startsWith('http://') || content.startsWith('https://')) {
      return 'url';
    }
    
    if (this.getWordCount(content) > this.LONG_TEXT_THRESHOLD) {
      return 'long_text';
    }
    
    return 'text';
  }

  /**
   * üìä ƒê·∫øm s·ªë t·ª´
   */
  private getWordCount(text: string): number {
    return text.trim().split(/\s+/).length;
  }

  /**
   * ü§ñ Ph√¢n t√≠ch clipboard content b·∫±ng AI
   */
  private async analyzeClipboardContent(event: ClipboardEvent): Promise<void> {
    try {
      let analysisPrompt = "";
      
      switch (event.type) {
        case 'error':
          analysisPrompt = `Ph√¢n t√≠ch l·ªói sau v√† ƒë∆∞a ra g·ª£i √Ω kh·∫Øc ph·ª•c ng·∫Øn g·ªçn (< 30 t·ª´): "${event.content.substring(0, 200)}..."`;
          break;
        case 'code':
          analysisPrompt = `Ph√¢n t√≠ch ƒëo·∫°n code sau v√† ƒë∆∞a ra nh·∫≠n x√©t h·ªØu √≠ch (< 30 t·ª´): "${event.content.substring(0, 200)}..."`;
          break;
        case 'long_text':
          analysisPrompt = `T√≥m t·∫Øt ƒëo·∫°n vƒÉn b·∫£n d√†i n√†y th√†nh 3 ƒëi·ªÉm ch√≠nh: "${event.content.substring(0, 300)}..."`;
          break;
        default:
          return; // Kh√¥ng ph√¢n t√≠ch text ng·∫Øn th∆∞·ªùng
      }

      const aiResponse = await generateThoughtMessage({
        timeOfDay: this.currentContext.timeContext.timeOfDay,
        weather: null,
        city: "Ho Chi Minh City", 
        isLongSession: false,
        customPrompt: analysisPrompt
      });

      if (aiResponse.success && aiResponse.message) {
        this.currentContext.suggestions = [aiResponse.message];
        
        // Emit context event for UI
        window.dispatchEvent(new CustomEvent('context-suggestion', {
          detail: {
            type: event.type,
            suggestion: aiResponse.message,
            content: event.content.substring(0, 100) + "...",
            timestamp: Date.now()
          }
        }));
      }
    } catch (error) {
      console.error("Error analyzing clipboard:", error);
    }
  }

  /**
   * üí° T·∫°o suggestions d·ª±a tr√™n window title
   */
  private async generateWindowSuggestions(windowTitle: string): Promise<void> {
    try {
      const windowPrompt = `D·ª±a tr√™n ti√™u ƒë·ªÅ c·ª≠a s·ªï "${windowTitle}", ƒë∆∞a ra m·ªôt l·ªùi g·ª£i √Ω h·ªØu √≠ch cho ng∆∞·ªùi d√πng (< 25 t·ª´)`;
      
      const aiResponse = await generateThoughtMessage({
        timeOfDay: this.currentContext.timeContext.timeOfDay,
        weather: null,
        city: "Ho Chi Minh City",
        isLongSession: false,
        customPrompt: windowPrompt
      });

      if (aiResponse.success && aiResponse.message) {
        // Show as thought bubble occasionally (20% chance)
        if (Math.random() < 0.2) {
          window.dispatchEvent(new CustomEvent('ai-message', {
            detail: {
              text: aiResponse.message,
              timestamp: Date.now(),
              petId: 'context-ai',
              isContextMessage: true
            }
          }));
        }
      }
    } catch (error) {
      console.error("Error generating window suggestions:", error);
    }
  }

  /**
   * üëÇ Subscribe to context changes
   */
  public addListener(callback: (context: ContextData) => void): void {
    this.listeners.push(callback);
  }

  /**
   * üîá Unsubscribe from context changes  
   */
  public removeListener(callback: (context: ContextData) => void): void {
    this.listeners = this.listeners.filter(listener => listener !== callback);
  }

  /**
   * üì¢ Notify all listeners
   */
  private notifyListeners(): void {
    this.listeners.forEach(listener => {
      try {
        listener(this.currentContext);
      } catch (error) {
        console.error("Error in context listener:", error);
      }
    });
  }

  /**
   * üìä Get current context
   */
  public getCurrentContext(): ContextData {
    return { ...this.currentContext };
  }

  /**
   * üìã Get clipboard history
   */
  public getClipboardHistory(): ClipboardEvent[] {
    return [...this.clipboardHistory];
  }

  /**
   * üõë Stop monitoring
   */
  public stopMonitoring(): void {
    this.isMonitoring = false;
    console.log("üõë Context monitoring ƒë√£ d·ª´ng");
  }
}

// Export singleton instance
export const contextManager = ContextManager.getInstance();

// Helper functions for external use
export const startContextMonitoring = () => contextManager.startMonitoring();
export const getCurrentContext = () => contextManager.getCurrentContext();
export const getClipboardHistory = () => contextManager.getClipboardHistory();
export const addContextListener = (callback: (context: ContextData) => void) => 
  contextManager.addListener(callback);
export const removeContextListener = (callback: (context: ContextData) => void) => 
  contextManager.removeListener(callback);

// Types export
export type { ClipboardEvent, ContextData, ContextAnalysis };
